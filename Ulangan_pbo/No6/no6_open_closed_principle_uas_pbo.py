# -*- coding: utf-8 -*-
"""No6_Open-Closed Principle_UAS PBO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R4WCsjB0tu5EQVyyBcv1KrkIsDeIB_aB
"""

# Open-Closed Principle (OCP)

# Contoh biasa
class Shape:
    def area(self):
        pass

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def area(self):
        return self.width * self.height

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return 3.14 * self.radius * self.radius

# Dalam contoh di atas, kelas Shape merupakan abstract class 
# yang menyediakan method area yang harus diimplementasikan oleh subclassnya. 
# Kita bisa menambahkan subclass baru seperti Triangle atau Square 
# tanpa perlu memodifikasi kelas Shape.

class Triangle(Shape):
    def __init__(self, base, height):
        self.base = base
        self.height = height
    
    def area(self):
        return 0.5 * self.base * self.height

class Square(Shape):
    def __init__(self, side):
        self.side = side
    
    def area(self):
        return self.side * self.side
# Dengan demikian, kelas Shape sudah sesuai dengan prinsip OCP
# karena dapat ditambahkan fitur baru tanpa perlu memodifikasi class tersebut.